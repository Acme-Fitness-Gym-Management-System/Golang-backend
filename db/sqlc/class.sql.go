// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: class.sql

package db

import (
	"context"
	"time"
)

const createClass = `-- name: CreateClass :one
INSERT INTO class (
    instructorid,
    reg_status,
    start_time,
    end_time,
    description,
    classtype,
    locationid
)
VALUES
    ($1, $2, $3,$4, $5, $6,$7) RETURNING id, instructorid, reg_status, start_time, end_time, description, classtype, locationid
`

type CreateClassParams struct {
	Instructorid int64          `json:"instructorid"`
	RegStatus    string `json:"reg_status"`
	StartTime    time.Time      `json:"start_time"`
	EndTime      time.Time      `json:"end_time"`
	Description  string `json:"description"`
	Classtype    string `json:"classtype"`
	Locationid   int64          `json:"locationid"`
}

func (q *Queries) CreateClass(ctx context.Context, arg CreateClassParams) (Class, error) {
	row := q.db.QueryRowContext(ctx, createClass,
		arg.Instructorid,
		arg.RegStatus,
		arg.StartTime,
		arg.EndTime,
		arg.Description,
		arg.Classtype,
		arg.Locationid,
	)
	var i Class
	err := row.Scan(
		&i.ID,
		&i.Instructorid,
		&i.RegStatus,
		&i.StartTime,
		&i.EndTime,
		&i.Description,
		&i.Classtype,
		&i.Locationid,
	)
	return i, err
}

const getClass = `-- name: GetClass :one
SELECT id, instructorid, reg_status, start_time, end_time, description, classtype, locationid FROM class
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetClass(ctx context.Context, id int64) (Class, error) {
	row := q.db.QueryRowContext(ctx, getClass, id)
	var i Class
	err := row.Scan(
		&i.ID,
		&i.Instructorid,
		&i.RegStatus,
		&i.StartTime,
		&i.EndTime,
		&i.Description,
		&i.Classtype,
		&i.Locationid,
	)
	return i, err
}
