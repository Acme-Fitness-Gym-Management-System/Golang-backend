// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: class.sql

package db

import (
	"context"
	"database/sql"
)

const createClass = `-- name: CreateClass :one
INSERT INTO class (
    instructorname,
    name,
    cost,
    scheduleid
)
VALUES
    ($1, $2, $3,$4) RETURNING id, instructorname, regstatus, name, classtype, cost, scheduleid
`

type CreateClassParams struct {
	Instructorname string         `json:"instructorname"`
	Name           sql.NullString `json:"name"`
	Cost           int32          `json:"cost"`
	Scheduleid     int64          `json:"scheduleid"`
}

func (q *Queries) CreateClass(ctx context.Context, arg CreateClassParams) (Class, error) {
	row := q.db.QueryRowContext(ctx, createClass,
		arg.Instructorname,
		arg.Name,
		arg.Cost,
		arg.Scheduleid,
	)
	var i Class
	err := row.Scan(
		&i.ID,
		&i.Instructorname,
		&i.Regstatus,
		&i.Name,
		&i.Classtype,
		&i.Cost,
		&i.Scheduleid,
	)
	return i, err
}

const getAllClasses = `-- name: GetAllClasses :one
SELECT id, instructorname, regstatus, name, classtype, cost, scheduleid FROM class
`

func (q *Queries) GetAllClasses(ctx context.Context) (Class, error) {
	row := q.db.QueryRowContext(ctx, getAllClasses)
	var i Class
	err := row.Scan(
		&i.ID,
		&i.Instructorname,
		&i.Regstatus,
		&i.Name,
		&i.Classtype,
		&i.Cost,
		&i.Scheduleid,
	)
	return i, err
}

const getClass = `-- name: GetClass :one
SELECT id, instructorname, regstatus, name, classtype, cost, scheduleid FROM class
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetClass(ctx context.Context, id int64) (Class, error) {
	row := q.db.QueryRowContext(ctx, getClass, id)
	var i Class
	err := row.Scan(
		&i.ID,
		&i.Instructorname,
		&i.Regstatus,
		&i.Name,
		&i.Classtype,
		&i.Cost,
		&i.Scheduleid,
	)
	return i, err
}
