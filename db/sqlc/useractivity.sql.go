// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: useractivity.sql

package db

import (
	"context"
	"time"
)

const createUserActivity = `-- name: CreateUserActivity :one
INSERT INTO useractivity
("start" ,"end" ,userid,deviceid)
VALUES
    ($1,$2,$3,$4) RETURNING id, start, "end", userid, deviceid
`

type CreateUserActivityParams struct {
	Start    time.Time `json:"start"`
	End      time.Time `json:"end"`
	Userid   int64     `json:"userid"`
	Deviceid int64     `json:"deviceid"`
}

func (q *Queries) CreateUserActivity(ctx context.Context, arg CreateUserActivityParams) (Useractivity, error) {
	row := q.db.QueryRowContext(ctx, createUserActivity,
		arg.Start,
		arg.End,
		arg.Userid,
		arg.Deviceid,
	)
	var i Useractivity
	err := row.Scan(
		&i.ID,
		&i.Start,
		&i.End,
		&i.Userid,
		&i.Deviceid,
	)
	return i, err
}

const getUserActivity = `-- name: GetUserActivity :many
SELECT id, start, "end", userid, deviceid FROM useractivity
WHERE userid = $1
`

func (q *Queries) GetUserActivity(ctx context.Context, userid int64) ([]Useractivity, error) {
	rows, err := q.db.QueryContext(ctx, getUserActivity, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Useractivity{}
	for rows.Next() {
		var i Useractivity
		if err := rows.Scan(
			&i.ID,
			&i.Start,
			&i.End,
			&i.Userid,
			&i.Deviceid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
